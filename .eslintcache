[{"C:\\Users\\marti\\Documents\\Git\\physio-app\\src\\index.js":"1","C:\\Users\\marti\\Documents\\Git\\physio-app\\src\\App.js":"2","C:\\Users\\marti\\Documents\\Git\\physio-app\\src\\aws-exports.js":"3","C:\\Users\\marti\\Documents\\Git\\physio-app\\src\\reportWebVitals.js":"4","C:\\Users\\marti\\Documents\\Git\\physio-app\\src\\CustModal.js":"5","C:\\Users\\marti\\Documents\\Git\\physio-app\\src\\CustModalCheckbox.js":"6","C:\\Users\\marti\\Documents\\Git\\physio-app\\src\\CustModalDropdown.js":"7"},{"size":4151,"mtime":1613980722003,"results":"8","hashOfConfig":"9"},{"size":7471,"mtime":1613980811079,"results":"10","hashOfConfig":"9"},{"size":489,"mtime":1612687733208,"results":"11","hashOfConfig":"9"},{"size":375,"mtime":1612682819484,"results":"12","hashOfConfig":"9"},{"size":8089,"mtime":1612690477254,"results":"13","hashOfConfig":"9"},{"size":587,"mtime":1612682819466,"results":"14","hashOfConfig":"9"},{"size":430,"mtime":1612682819466,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"1hwvdtd",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"19"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"19"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},"C:\\Users\\marti\\Documents\\Git\\physio-app\\src\\index.js",["36","37","38","39","40","41","42"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport Amplify, { Auth } from 'aws-amplify';\r\nimport awsconfig from './aws-exports';\r\nimport { withAuthenticator, AmplifySignOut } from '@aws-amplify/ui-react';\r\nimport awsExports from \"./aws-exports\";\r\nAmplify.configure(awsExports);\r\nAmplify.configure(awsconfig);\r\n//git log --all --graph --oneline --decorate\r\n\r\n\r\nAmplify.configure({\r\n    Auth: {\r\n\r\n        // // REQUIRED only for Federated Authentication - Amazon Cognito Identity Pool ID\r\n        // identityPoolId: 'XX-XXXX-X:XXXXXXXX-XXXX-1234-abcd-1234567890ab',\r\n\r\n        // REQUIRED - Amazon Cognito Region\r\n        region: 'ap-northeast-2',\r\n\r\n        // // OPTIONAL - Amazon Cognito Federated Identity Pool Region \r\n        // // Required only if it's different from Amazon Cognito Region\r\n        // identityPoolRegion: 'XX-XXXX-X',\r\n\r\n        // OPTIONAL - Amazon Cognito User Pool ID\r\n        userPoolId: 'ap-northeast-2_03oUG0RVc',\r\n\r\n        // // OPTIONAL - Amazon Cognito Web Client ID (26-char alphanumeric string)\r\n        // userPoolWebClientId: 'a1b2c3d4e5f6g7h8i9j0k1l2m3',\r\n\r\n        // // OPTIONAL - Enforce user authentication prior to accessing AWS resources or not\r\n        // mandatorySignIn: false,\r\n\r\n        // // OPTIONAL - Configuration for cookie storage\r\n        // // Note: if the secure flag is set to true, then the cookie transmission requires a secure protocol\r\n        // cookieStorage: {\r\n        // // REQUIRED - Cookie domain (only required if cookieStorage is provided)\r\n        //     domain: '.yourdomain.com',\r\n        // // OPTIONAL - Cookie path\r\n        //     path: '/',\r\n        // // OPTIONAL - Cookie expiration in days\r\n        //     expires: 365,\r\n        // // OPTIONAL - See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite\r\n        //     sameSite: \"strict\" | \"lax\",\r\n        // // OPTIONAL - Cookie secure flag\r\n        // // Either true or false, indicating if the cookie transmission requires a secure protocol (https).\r\n        //     secure: true\r\n        // },\r\n\r\n        // // OPTIONAL - customized storage object\r\n        // storage: MyStorage,\r\n\r\n        // // OPTIONAL - Manually set the authentication flow type. Default is 'USER_SRP_AUTH'\r\n        // authenticationFlowType: 'USER_PASSWORD_AUTH',\r\n\r\n        // // OPTIONAL - Manually set key value pairs that can be passed to Cognito Lambda Triggers\r\n        // clientMetadata: { myCustomKey: 'myCustomValue' },\r\n\r\n        //  // OPTIONAL - Hosted UI configuration\r\n        // oauth: {\r\n        //     domain: 'your_cognito_domain',\r\n        //     scope: ['phone', 'email', 'profile', 'openid', 'aws.cognito.signin.user.admin'],\r\n        //     redirectSignIn: 'http://localhost:3000/',\r\n        //     redirectSignOut: 'http://localhost:3000/',\r\n        //     responseType: 'code' // or 'token', note that REFRESH token will only be generated when the responseType is code\r\n        // }\r\n    }\r\n});\r\n\r\n// You can get the current config object\r\nconst currentConfig = Auth.configure();\r\nlet username=\"\"\r\nlet password=\"\"\r\nasync function signIn() {\r\n    try {\r\n        const user = await Auth.signIn(username, password);\r\n    } catch (error) {\r\n        console.log('error signing in', error);\r\n    }\r\n}\r\n\r\nasync function resendConfirmationCode() {\r\n    try {\r\n        await Auth.resendSignUp(username);\r\n        console.log('code resent successfully');\r\n    } catch (err) {\r\n        console.log('error resending code: ', err);\r\n    }\r\n}\r\n\r\nasync function signOut() {\r\n    try {\r\n        await Auth.signOut();\r\n    } catch (error) {\r\n        console.log('error signing out: ', error);\r\n    }\r\n}\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    {/* <AmplifySignOut /> */}\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",["43","44"],"C:\\Users\\marti\\Documents\\Git\\physio-app\\src\\App.js",[],"C:\\Users\\marti\\Documents\\Git\\physio-app\\src\\aws-exports.js",[],"C:\\Users\\marti\\Documents\\Git\\physio-app\\src\\reportWebVitals.js",[],"C:\\Users\\marti\\Documents\\Git\\physio-app\\src\\CustModal.js",["45"],"import './Modal.css';\r\nimport React, { Component } from 'react';\r\nimport Modal from 'react-modal'\r\nimport axios from 'axios'\r\nimport CustModalCheckbox from './CustModalCheckbox'\r\nimport CustModalDropdown from './CustModalDropdown'\r\n\r\nclass CustModal extends Component {\r\n    constructor(props) {\r\n        super()\r\n        this.state = {\r\n            customers: [],\r\n            modalStartDate: \"\",\r\n            TimePref: \"\",\r\n            allCustomers: [],\r\n            selectedCustomer: 0\r\n        }\r\n\r\n        this.getCustomers = this.getCustomers.bind(this);\r\n        this.updateCalled = this.updateCalled.bind(this);\r\n        this.getAllCustomers = this.getAllCustomers.bind(this);\r\n        this.updateSelectedCustomer = this.updateSelectedCustomer.bind(this);\r\n        this.postBooking = this.postBooking.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.modalStartDate != this.props.modalStartDate) {\r\n            console.log(\"modal date changed prevState = \" + prevState.modalStartDate + \"props modalstartdate = \" + this.props.modalStartDate)\r\n            this.setState({ modalStartDate: this.props.modalStartDate })\r\n            console.log(\"new state start date =\" + this.state.modalStartDate)\r\n            this.getCustomers()\r\n        } else {\r\n            console.log(\"no change\")\r\n        }\r\n\r\n\r\n    }\r\n    getCustomers() {\r\n\r\n        // console.log(\"from component \" + this.state.modalStartDate)\r\n        // console.log(\"from component \" + (new Date(this.state.modalStartDate)).getDay())\r\n        let day = \"\"\r\n        let dayNumber = (new Date(this.props.modalStartDate)).getDay()\r\n        // console.log(\"day number = \" + dayNumber)\r\n        switch (dayNumber) {\r\n            case 0: day = \"SUN\"; break;\r\n            case 1: day = \"MON\"; break;\r\n            case 2: day = \"TUE\"; break;\r\n            case 3: day = \"WED\"; break;\r\n            case 4: day = \"THU\"; break;\r\n            case 5: day = \"FRI\"; break;\r\n            default: day = \"SAT\"; break;\r\n        }\r\n        // console.log(day)\r\n        // console.log(\"hours = \" + (new Date(this.state.modalStartDate)).getHours())\r\n        let time = (new Date(this.props.modalStartDate)).getHours()\r\n        let hour = \"\"\r\n        if (time < 10) {\r\n            hour = \"EM\"\r\n        }\r\n        else if (time >= 10 && time < 12) {\r\n            hour = \"LM\"\r\n        }\r\n        else if (time >= 12 && time < 16) {\r\n            hour = \"EA\"\r\n\r\n        } else if (time >= 16 && time < 18) {\r\n            hour = \"LA\"\r\n\r\n        } else if (time >= 18 && time < 20) {\r\n            hour = \"E\"\r\n        } else {\r\n            hour = \"N\"\r\n        }\r\n        axios.get(\"https://0q7lvp0ual.execute-api.ap-northeast-2.amazonaws.com/dev/getcustomerbytimepreference?TimePref=\" + day + \"-\" + hour)\r\n            .then(response => {\r\n                console.log(response.data)\r\n                const freshCustomers = response.data.message.Items.map(item => {\r\n                    return {\r\n                        'Id': item.Id,\r\n                        'ticked': false,\r\n                        'Name': item.Name\r\n                    }\r\n                })\r\n                // .map(items => items.Name)\r\n                this.setState({\r\n                    customers: freshCustomers,\r\n                    TimePref: response.data.TimePref,\r\n                })\r\n\r\n\r\n\r\n            })\r\n            .catch(error => console.error(error))\r\n\r\n        // console.log(\"customer list = \" + customerlist)\r\n    }\r\n    getAllCustomers() {\r\n        axios.get(\"https://0q7lvp0ual.execute-api.ap-northeast-2.amazonaws.com/dev/getallcustomers\")\r\n            .then(response => {\r\n                // console.log(response.data)\r\n                const freshAllCustomers = response.data.item.Items.map(item => {\r\n                    return {\r\n                        'Id': item.Id,\r\n                        'Name': item.Name\r\n                    }\r\n                })\r\n                console.log(\"get all custoomers \", freshAllCustomers)\r\n                // .map(items => items.Name)\r\n                this.setState({\r\n                    allCustomers: freshAllCustomers,\r\n                    selectedCustomer: freshAllCustomers[0].Id\r\n                })\r\n            })\r\n            .catch(error => console.error(error))\r\n\r\n\r\n    }\r\n\r\n    updateCalled(id) {\r\n        this.setState(prevState => {\r\n            const updatedCustomers = prevState.customers.map(customer => {\r\n                if (customer.Id === id) {\r\n                    console.log(\"hit\")\r\n                    return {\r\n                        ...customer,\r\n                        ticked: !customer.ticked\r\n                    }\r\n                } return customer\r\n            })\r\n            console.log(\"update clicked\")\r\n            console.log(prevState.customers)\r\n            console.log(updatedCustomers)\r\n            return {\r\n                customers: updatedCustomers\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    updateSelectedCustomer(event) {\r\n        console.log(\"checking type\", event.target.value)\r\n        this.setState({ selectedCustomer: event.target.value })\r\n        console.log(\"event changed to\", this.state.selectedCustomer)\r\n    }\r\n\r\n    postBooking() {\r\n        const StartDate = ((new Date(this.props.modalStartDate)).getTime() / 1000);\r\n        console.log(StartDate)\r\n        const EndDate = ((new Date(this.props.modalEndDate)).getTime() / 1000);\r\n        console.log(EndDate)\r\n        const customer = this.state.selectedCustomer\r\n        axios.post(\"https://0q7lvp0ual.execute-api.ap-northeast-2.amazonaws.com/dev/putnewbooking?StartTime=\" + StartDate + \"&EndTime=\" + EndDate + \"&CustId=\" + customer)\r\n            .then(function (response) {\r\n                console.log(response);\r\n            })\r\n\r\n\r\n        this.props.onClickFunction();\r\n    }\r\n    componentDidMount() {\r\n        this.getCustomers()\r\n        this.getAllCustomers()\r\n    }\r\n\r\n    render() {\r\n        console.log(\"inside render customers = \" + this.state.customers)\r\n        const torender = this.state.customers.map(item =>\r\n            // console.log(item.Id+\" \"+item.Name))\r\n            <CustModalCheckbox\r\n                key={item.Id}\r\n                customer={item}\r\n                updateCalled={this.updateCalled} />\r\n        )\r\n        const selectionToRender = this.state.allCustomers.map(customer =>\r\n            <CustModalDropdown\r\n                key={customer.Id}\r\n                customer={customer} />\r\n        )\r\n        return (\r\n\r\n            <div>\r\n                <Modal\r\n                    isOpen={this.props.isOpen}\r\n                    onRequestClose={() => this.props.showModal}\r\n                    shouldCLooseOnOverlayClick={() => this.props.hideModal}>\r\n                    <h1>New Booking</h1>\r\n                    <h4>Date: {(this.props.modalStartDate).substring(0, 10)}</h4>\r\n                    <h4>Start time: {(this.props.modalStartDate).substring(11, 16)} - {(this.props.modalEndDate).substring(11, 16)}</h4>\r\n                    <h2>Select a customer to book below</h2>\r\n                    <div>\r\n                        {torender}\r\n                    </div>\r\n                    <br></br>\r\n                    <div>\r\n                        <table>\r\n                            <tr>\r\n\r\n                                <select\r\n                                    value={this.state.selectedCustomer}\r\n                                    onChange={this.updateSelectedCustomer}\r\n                                >\r\n                                    {selectionToRender}\r\n                                </select>\r\n\r\n                            </tr>\r\n                            <td>\r\n                                <button onClick={this.postBooking}>Confirm</button>\r\n\r\n                            </td><td>\r\n\r\n                                <button onClick={() => this.props.onClickFunction()}>Close</button>\r\n                            </td>\r\n\r\n                        </table>\r\n\r\n                    </div>\r\n\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default CustModal\r\n\r\n\r\n","C:\\Users\\marti\\Documents\\Git\\physio-app\\src\\CustModalCheckbox.js",["46"],"import React, { Component } from 'react'\r\n\r\nclass CustModalCheckbox extends Component {\r\n    constructor() {\r\n        super()\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n               <p> {this.props.customer.Name}</p> \r\n               Called\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={this.props.customer.ticked}\r\n                    onChange={() => this.props.updateCalled(this.props.customer.Id)}\r\n                >\r\n                </input>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default CustModalCheckbox","C:\\Users\\marti\\Documents\\Git\\physio-app\\src\\CustModalDropdown.js",["47"],"import React, { Component } from 'react'\r\n\r\nclass CustModalDropdown extends Component {\r\n    constructor() {\r\n        super()\r\n      \r\n    }\r\n    render() {\r\n        return (\r\n            \r\n                <option\r\n                    value={this.props.customer.Id}\r\n                >\r\n                    {this.props.customer.Name}\r\n                </option>\r\n            \r\n        )\r\n    }\r\n\r\n}\r\nexport default CustModalDropdown",["48","49"],{"ruleId":"50","severity":1,"message":"51","line":8,"column":10,"nodeType":"52","messageId":"53","endLine":8,"endColumn":27},{"ruleId":"50","severity":1,"message":"54","line":8,"column":29,"nodeType":"52","messageId":"53","endLine":8,"endColumn":43},{"ruleId":"50","severity":1,"message":"55","line":74,"column":7,"nodeType":"52","messageId":"53","endLine":74,"endColumn":20},{"ruleId":"50","severity":1,"message":"56","line":77,"column":16,"nodeType":"52","messageId":"53","endLine":77,"endColumn":22},{"ruleId":"50","severity":1,"message":"57","line":79,"column":15,"nodeType":"52","messageId":"53","endLine":79,"endColumn":19},{"ruleId":"50","severity":1,"message":"58","line":85,"column":16,"nodeType":"52","messageId":"53","endLine":85,"endColumn":38},{"ruleId":"50","severity":1,"message":"59","line":94,"column":16,"nodeType":"52","messageId":"53","endLine":94,"endColumn":23},{"ruleId":"60","replacedBy":"61"},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","severity":1,"message":"65","line":27,"column":38,"nodeType":"66","messageId":"67","endLine":27,"endColumn":40},{"ruleId":"68","severity":1,"message":"69","line":4,"column":5,"nodeType":"70","messageId":"71","endLine":6,"endColumn":6},{"ruleId":"68","severity":1,"message":"69","line":4,"column":5,"nodeType":"70","messageId":"71","endLine":7,"endColumn":6},{"ruleId":"60","replacedBy":"72"},{"ruleId":"62","replacedBy":"73"},"no-unused-vars","'withAuthenticator' is defined but never used.","Identifier","unusedVar","'AmplifySignOut' is defined but never used.","'currentConfig' is assigned a value but never used.","'signIn' is defined but never used.","'user' is assigned a value but never used.","'resendConfirmationCode' is defined but never used.","'signOut' is defined but never used.","no-native-reassign",["74"],"no-negated-in-lhs",["75"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["74"],["75"],"no-global-assign","no-unsafe-negation"]