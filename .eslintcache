[{"C:\\Users\\User\\Documents\\Git\\physio-app\\src\\index.js":"1","C:\\Users\\User\\Documents\\Git\\physio-app\\src\\aws-exports.js":"2","C:\\Users\\User\\Documents\\Git\\physio-app\\src\\reportWebVitals.js":"3","C:\\Users\\User\\Documents\\Git\\physio-app\\src\\App.js":"4","C:\\Users\\User\\Documents\\Git\\physio-app\\src\\AddBookingModalCheckbox.js":"5","C:\\Users\\User\\Documents\\Git\\physio-app\\src\\AddBookingModalDropdown.js":"6","C:\\Users\\User\\Documents\\Git\\physio-app\\src\\AddBookingModal.js":"7","C:\\Users\\User\\Documents\\Git\\physio-app\\src\\AddCustomerModal.js":"8","C:\\Users\\User\\Documents\\Git\\physio-app\\src\\EditBookingModal.js":"9"},{"size":4365,"mtime":1614238999772,"results":"10","hashOfConfig":"11"},{"size":489,"mtime":1614276289917,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":9297,"mtime":1614625483345,"results":"14","hashOfConfig":"11"},{"size":599,"mtime":1614591604722,"results":"15","hashOfConfig":"11"},{"size":434,"mtime":1614591580396,"results":"16","hashOfConfig":"11"},{"size":8175,"mtime":1614597651296,"results":"17","hashOfConfig":"11"},{"size":6726,"mtime":1614624324670,"results":"18","hashOfConfig":"11"},{"size":1790,"mtime":1614675864117,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"6a829z",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\User\\Documents\\Git\\physio-app\\src\\index.js",[],["44","45"],"C:\\Users\\User\\Documents\\Git\\physio-app\\src\\aws-exports.js",[],"C:\\Users\\User\\Documents\\Git\\physio-app\\src\\reportWebVitals.js",[],"C:\\Users\\User\\Documents\\Git\\physio-app\\src\\App.js",["46","47","48","49"],"import React, { Component } from 'react';\r\nimport { DayPilot, DayPilotCalendar, DayPilotNavigator } from \"daypilot-pro-react\";\r\nimport \"./CalendarStyles.css\";\r\nimport axios from 'axios';\r\nimport Modal from 'react-modal'\r\nimport AddBookingModal from './AddBookingModal'\r\nimport AddCustomerModal from './AddCustomerModal'\r\nimport EditBookingModal from './EditBookingModal'\r\nimport { withAuthenticator, AmplifySignOut } from '@aws-amplify/ui-react';\r\n\r\nModal.setAppElement('#root')\r\n\r\nconst styles = {\r\n  wrap: {\r\n    display: \"flex\"\r\n  },\r\n  left: {\r\n    marginRight: \"10px\"\r\n  },\r\n  main: {\r\n    flexGrow: \"1\"\r\n  }\r\n};\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      viewType: \"Week\",\r\n      durationBarVisible: false,\r\n      timeRangeSelectedHandling: \"Enabled\",\r\n      onTimeRangeSelected: args => {\r\n        this.calendar.clearSelection();\r\n        this.setState({\r\n          modalStartDate: args.start.value,\r\n          modalEndDate: args.end.value,\r\n          isBookingModalOpen: true\r\n        })\r\n\r\n      },\r\n      onEventClick: args => {\r\n        this.setState({\r\n          EditBookingStartDate: args.e.data.start.value,\r\n          EditBookingEndDate: args.e.data.end.value,\r\n        EditBookingName:args.e.data.text,\r\n        EditBookingId:args.e.data.id,\r\n          isEditBookingModalOpen: true\r\n        })\r\n      },\r\n      events: [],\r\n      isBookingModalOpen: false,\r\n      isCustomerModalOpen:false,\r\n      modalStartDate: \"\",\r\n      modalEndDate: \"\",\r\n      isEditBookingModalOpen:false,\r\n      EditBookingStartDate:\"\",\r\n      EditBookingEndDate:\"\",\r\n      EditBookingId:\"\",\r\n      EditBookingName:\"\"\r\n    };\r\n\r\n    this.showBookingModal = this.showBookingModal.bind(this);\r\n    this.hideBookingModal = this.hideBookingModal.bind(this);\r\n    this.showCustomerModal = this.showCustomerModal.bind(this);\r\n    this.hideCustomerModal = this.hideCustomerModal.bind(this);\r\n    this.showEditBookingModal=this.showEditBookingModal.bind(this);\r\n    this.hideEditBookingModal = this.hideEditBookingModal.bind(this);\r\n    this.dateFormatter = this.dateFormatter.bind(this);\r\n    this.getAllBookings = this.getAllBookings.bind(this);\r\n  }\r\n\r\n  showBookingModal = () => {\r\n    this.setState({ isBookingModalOpen: true });\r\n    this.getAllBookings();\r\n    console.log(\"showBookingModal clicked\")\r\n  };\r\n\r\n  hideBookingModal = () => {\r\n    this.setState({ isBookingModalOpen: false });\r\n\r\n    this.getAllBookings();\r\n    console.log(\"hideBookingModal clicked\")\r\n  };\r\n\r\n  showCustomerModal = () => {\r\n    this.setState({ isCustomerModalOpen: true });\r\n    console.log(\"showCustomerModal clicked\")\r\n  };\r\n\r\n  hideCustomerModal = () => {\r\n    this.setState({ isCustomerModalOpen: false });    \r\n    console.log(\"hideCustomerModal clicked\")\r\n  };\r\n  \r\n  showEditBookingModal = () => {\r\n    this.setState({ isEditBookingModalOpen: true });\r\n    console.log(\"showEditBookingModal clicked\")\r\n  };\r\n\r\n  hideEditBookingModal = () => {\r\n    this.setState({ isEditBookingModalOpen: false });    \r\n    console.log(\"hideEditBookingModal clicked\")\r\n  };\r\n\r\n  dateFormatter(input) {\r\n    let st = new Date(input * 1000)\r\n    // Hours part from the timestamp\r\n    var year = st.getFullYear()\r\n    var month = (st.getMonth() + 1) < 10 ? (\"0\" + (st.getMonth() + 1)) : (st.getMonth() + 1);\r\n    var day = (st.getDate()) < 10 ? (\"0\" + (st.getDate())) : (st.getDate());\r\n    var hour = st.getHours() < 10 ? \"0\" + st.getHours() : st.getHours()\r\n    var minute = st.getMinutes() < 10 ? \"0\" + st.getMinutes() : st.getMinutes()\r\n    var second = st.getSeconds() < 10 ? \"0\" + st.getSeconds() : st.getSeconds()\r\n    // Minutes part from the timestamp\r\n    // Seconds part from the timestamp\r\n    let out = year + \"-\" + month + \"-\" + day + \"T\" + hour + \":\" + minute + \":\" + second\r\n    // console.log(out)\r\n    return out\r\n  }\r\n  getAllBookings() { //change this to per month instead of per current week\r\n    let today = new Date();\r\n    let dateNumber = today.getDay();\r\n    let monthNumber = today.getMonth();\r\n    let yearNumber = today.getFullYear();\r\n    let lastSunday = today.setDate(today.getDate() - dateNumber)\r\n    let lastSundayDate = new Date(lastSunday)\r\n    let lastSunDateTime = this.dateFormatter(lastSundayDate / 1000).substring(0, 10) + \"T00:00:00.000Z\"\r\n    // console.log(\"last sundate\", lastSunDateTime)\r\n    let nextSaturday = lastSundayDate.setDate(lastSundayDate.getDate() + 6)\r\n    let nextSaturdayDate = new Date(nextSaturday)\r\n    let nextSaturDateTime = this.dateFormatter(nextSaturdayDate / 1000).substring(0, 10) + \"T00:00:00.000Z\"\r\n    // console.log(\"next saturdate\", nextSaturDateTime)\r\n    switch (monthNumber) {\r\n      case 1:\r\n      case 3:\r\n      case 5:\r\n      case 7:\r\n      case 8:\r\n      case 10:\r\n      case 12: dateNumber = 31; break;\r\n      case 2: dateNumber = yearNumber % 4 == 0 ? 29 : 28\r\n      default: dateNumber = 30; break;\r\n    }\r\n\r\n    lastSunDateTime = this.dateFormatter(new Date(yearNumber, monthNumber, 1) / 1000).substring(0, 10) + \"T00:00:00.000Z\"\r\n    // console.log(\"last sundate\", lastSunDateTime)\r\n\r\n    nextSaturDateTime = this.dateFormatter(new Date(yearNumber, monthNumber, dateNumber) / 1000).substring(0, 10) + \"T00:00:00.000Z\"\r\n    // console.log(\"next saturdate\", nextSaturDateTime)\r\n\r\n    let sundayToSend = ((new Date(lastSunDateTime)) / 1000 + 3600 * 7)\r\n    let saturdayToSend = ((new Date(nextSaturDateTime)) / 1000 + 3600 * 7)\r\n\r\n\r\n    // console.log(\"sundayToSend\", sundayToSend, \"saturdayToSend\", saturdayToSend)\r\n    axios.get(\"https://0q7lvp0ual.execute-api.ap-northeast-2.amazonaws.com/dev/getbookingbystarttimeandendtime?StartTime=\" + sundayToSend + \"&EndTime=\" + saturdayToSend)\r\n      .then(response => {\r\n        // console.log(response.data)\r\n        const thisEvents = response.data.message1.Items.map(items => {\r\n          return {\r\n            'id': items.ID,\r\n            'text': items.CustId,\r\n            'start': this.dateFormatter(items.StartTime),\r\n            'end': this.dateFormatter(items.EndTime)\r\n          }\r\n        })\r\n        // console.log(thisEvents)\r\n        this.setState({ events: thisEvents })\r\n      })\r\n      .catch(error => console.error(error))\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState, snapshot) {\r\n    if (prevState.events != this.state.events) {\r\n        console.log(\"events added, now have \", this.state.events.length)\r\n        this.setState({ events: this.state.events })\r\n    } else {\r\n        console.log(\"no change\")\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getAllBookings()\r\n    let today = new Date();\r\n    let unix_timestamp = Math.round(((today).getTime()) + 3600 * 7) / 1000\r\n\r\n    var date = new Date(unix_timestamp * 1000);\r\n    var day = (date.getDate()) < 10 ? (\"0\" + (date.getDate())) : (date.getDate());\r\n    var month = (date.getMonth() + 1) < 10 ? (\"0\" + (date.getMonth() + 1)) : (date.getMonth() + 1);\r\n    var year = date.getFullYear()\r\n    // console.log(year, month, day);\r\n\r\n\r\n    var thisweek = year + \"-\" + month + \"-\" + day;\r\n    // console.log(thisweek);\r\n    // load event data\r\n    this.setState({\r\n      startDate: thisweek,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    var { ...config } = this.state;\r\n    return (\r\n      <div>\r\n        <div>\r\n          <AddCustomerModal\r\n            isOpen={this.state.isCustomerModalOpen}\r\n            onRequestClose={this.showCustomerModal}\r\n            shouldCLooseOnOverlayClick={this.hideCustomerModal}\r\n            onClickFunction={this.hideCustomerModal}\r\n          />\r\n          <EditBookingModal\r\n            isOpen={this.state.isEditBookingModalOpen}\r\n            onRequestClose={this.hideEditBookingModal}\r\n            shouldCloseOnOverlayClick={false}\r\n            onClickFunction={this.hideEditBookingModal}\r\n            EditBookingStartDate={this.state.EditBookingStartDate}\r\n            EditBookingEndDate={this.state.EditBookingEndDate}\r\n            EditBookingName={this.state.EditBookingName}\r\n            EditBookingId={this.state.EditBookingId}\r\n          />\r\n          <AddBookingModal\r\n            isOpen={this.state.isBookingModalOpen}\r\n            onRequestClose={this.showBookingModal}\r\n            shouldCLooseOnOverlayClick={this.hideBookingModal}\r\n            onClickFunction={this.hideBookingModal}\r\n            modalStartDate={this.state.modalStartDate}\r\n            getAllBookings={this.getAllBookings}\r\n            modalEndDate={this.state.modalEndDate} />\r\n        </div>\r\n        <button onClick={this.showCustomerModal}>\r\n          Add New Customer\r\n        </button>\r\n        <div style={styles.wrap}>\r\n          <div style={styles.left}>\r\n            <DayPilotNavigator\r\n              selectMode={\"week\"}\r\n              showMonths={2}\r\n              skipMonths={2}\r\n              onTimeRangeSelected={args => {\r\n                this.setState({\r\n                  startDate: args.day\r\n                });\r\n              }}\r\n            />\r\n          </div>\r\n          <div style={styles.main}>\r\n            <DayPilotCalendar\r\n              {...config}\r\n              ref={component => {\r\n                this.calendar = component && component.control;\r\n              }}\r\n            />\r\n            <AmplifySignOut />\r\n          </div>\r\n        </div></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withAuthenticator(App);\r\n// export default App;","C:\\Users\\User\\Documents\\Git\\physio-app\\src\\AddBookingModalCheckbox.js",["50"],"import React, { Component } from 'react'\r\n\r\nclass AddBookingModalCheckbox extends Component {\r\n    constructor() {\r\n        super()\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n               <p> {this.props.customer.Name}</p> \r\n               Called\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={this.props.customer.ticked}\r\n                    onChange={() => this.props.updateCalled(this.props.customer.Id)}\r\n                >\r\n                </input>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default AddBookingModalCheckbox","C:\\Users\\User\\Documents\\Git\\physio-app\\src\\AddBookingModalDropdown.js",["51"],"import React, { Component } from 'react'\r\n\r\nclass AddBoookingDropdown extends Component {\r\n    constructor() {\r\n        super()\r\n      \r\n    }\r\n    render() {\r\n        return (\r\n            \r\n                <option\r\n                    value={this.props.customer.Id}\r\n                >\r\n                    {this.props.customer.Name}\r\n                </option>\r\n            \r\n        )\r\n    }\r\n\r\n}\r\nexport default AddBoookingDropdown","C:\\Users\\User\\Documents\\Git\\physio-app\\src\\AddBookingModal.js",["52"],"import './Modal.css';\r\nimport React, { Component } from 'react';\r\nimport Modal from 'react-modal'\r\nimport axios from 'axios'\r\nimport CustModalCheckbox from './AddBookingModalCheckbox'\r\nimport CustModalDropdown from './AddBookingModalDropdown'\r\n\r\nclass AddBookingModal extends Component {\r\n    constructor(props) {\r\n        super()\r\n        this.state = {\r\n            customers: [],\r\n            modalStartDate: \"\",\r\n            TimePref: \"\",\r\n            allCustomers: [],\r\n            selectedCustomer: 0\r\n        }\r\n\r\n        this.getCustomers = this.getCustomers.bind(this);\r\n        this.updateCalled = this.updateCalled.bind(this);\r\n        this.getAllCustomers = this.getAllCustomers.bind(this);\r\n        this.updateSelectedCustomer = this.updateSelectedCustomer.bind(this);\r\n        this.postBooking = this.postBooking.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n        if (prevProps.modalStartDate != this.props.modalStartDate) {\r\n            console.log(\"modal date changed prevState = \" + prevState.modalStartDate + \"props modalstartdate = \" + this.props.modalStartDate)\r\n            this.setState({ modalStartDate: this.props.modalStartDate })\r\n            console.log(\"new state start date =\" + this.state.modalStartDate)\r\n            this.getCustomers()\r\n        } else {\r\n            console.log(\"no change\")\r\n        }\r\n\r\n\r\n    }\r\n    getCustomers() {\r\n\r\n        // console.log(\"from component \" + this.state.modalStartDate)\r\n        // console.log(\"from component \" + (new Date(this.state.modalStartDate)).getDay())\r\n        let day = \"\"\r\n        let dayNumber = (new Date(this.props.modalStartDate)).getDay()\r\n        // console.log(\"day number = \" + dayNumber)\r\n        switch (dayNumber) {\r\n            case 0: day = \"SUN\"; break;\r\n            case 1: day = \"MON\"; break;\r\n            case 2: day = \"TUE\"; break;\r\n            case 3: day = \"WED\"; break;\r\n            case 4: day = \"THU\"; break;\r\n            case 5: day = \"FRI\"; break;\r\n            default: day = \"SAT\"; break;\r\n        }\r\n        // console.log(day)\r\n        // console.log(\"hours = \" + (new Date(this.state.modalStartDate)).getHours())\r\n        let time = (new Date(this.props.modalStartDate)).getHours()\r\n        let hour = \"\"\r\n        if (time < 10) {\r\n            hour = \"EM\"\r\n        }\r\n        else if (time >= 10 && time < 12) {\r\n            hour = \"LM\"\r\n        }\r\n        else if (time >= 12 && time < 16) {\r\n            hour = \"EA\"\r\n\r\n        } else if (time >= 16 && time < 18) {\r\n            hour = \"LA\"\r\n\r\n        } else if (time >= 18 && time < 20) {\r\n            hour = \"E\"\r\n        } else {\r\n            hour = \"N\"\r\n        }\r\n        axios.get(\"https://0q7lvp0ual.execute-api.ap-northeast-2.amazonaws.com/dev/getcustomerbytimepreference?TimePref=\" + day + \"-\" + hour)\r\n            .then(response => {\r\n                console.log(response.data)\r\n                const freshCustomers = response.data.message.Items.map(item => {\r\n                    return {\r\n                        'Id': item.Id,\r\n                        'ticked': false,\r\n                        'Name': item.Name\r\n                    }\r\n                })\r\n                // .map(items => items.Name)\r\n                this.setState({\r\n                    customers: freshCustomers,\r\n                    TimePref: response.data.TimePref,\r\n                })\r\n\r\n\r\n\r\n            })\r\n            .catch(error => console.error(error))\r\n\r\n        // console.log(\"customer list = \" + customerlist)\r\n    }\r\n    getAllCustomers() {\r\n        axios.get(\"https://0q7lvp0ual.execute-api.ap-northeast-2.amazonaws.com/dev/getallcustomers\")\r\n            .then(response => {\r\n                // console.log(response.data)\r\n                const freshAllCustomers = response.data.item.Items.map(item => {\r\n                    return {\r\n                        'Id': item.Id,\r\n                        'Name': item.Name\r\n                    }\r\n                })\r\n                // console.log(\"get all custoomers \", freshAllCustomers)\r\n                // .map(items => items.Name)\r\n                this.setState({\r\n                    allCustomers: freshAllCustomers,\r\n                    selectedCustomer: freshAllCustomers[0].Id\r\n                })\r\n            })\r\n            .catch(error => console.error(error))\r\n\r\n\r\n    }\r\n\r\n    updateCalled(id) {\r\n        this.setState(prevState => {\r\n            const updatedCustomers = prevState.customers.map(customer => {\r\n                if (customer.Id === id) {\r\n                    console.log(\"hit\")\r\n                    return {\r\n                        ...customer,\r\n                        ticked: !customer.ticked\r\n                    }\r\n                } return customer\r\n            })\r\n            console.log(\"update clicked\")\r\n            console.log(prevState.customers)\r\n            console.log(updatedCustomers)\r\n            return {\r\n                customers: updatedCustomers\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    updateSelectedCustomer(event) {\r\n        console.log(\"checking type\", event.target.value)\r\n        this.setState({ selectedCustomer: event.target.value })\r\n        console.log(\"event changed to\", this.state.selectedCustomer)\r\n    }\r\n\r\n    postBooking() {\r\n        const StartDate = ((new Date(this.props.modalStartDate)).getTime() / 1000);\r\n        console.log(StartDate)\r\n        const EndDate = ((new Date(this.props.modalEndDate)).getTime() / 1000);\r\n        console.log(EndDate)\r\n        const customer = this.state.selectedCustomer\r\n        axios.post(\"https://0q7lvp0ual.execute-api.ap-northeast-2.amazonaws.com/dev/putnewbooking?StartTime=\" + StartDate + \"&EndTime=\" + EndDate + \"&CustId=\" + customer)\r\n            .then(function (response) {\r\n                console.log(response);\r\n            })\r\n\r\n\r\n        setTimeout(this.props.getAllBookings(), 5000);\r\n        this.props.onClickFunction();\r\n    }\r\n    componentDidMount() {\r\n        this.getCustomers()\r\n        this.getAllCustomers()\r\n    }\r\n\r\n    render() {\r\n        // console.log(\"inside render customers = \" + this.state.customers)\r\n        const torender = this.state.customers.map(item =>\r\n            // console.log(item.Id+\" \"+item.Name))\r\n            <CustModalCheckbox\r\n                key={item.Id}\r\n                customer={item}\r\n                updateCalled={this.updateCalled} />\r\n        )\r\n        const selectionToRender = this.state.allCustomers.map(customer =>\r\n            <CustModalDropdown\r\n                key={customer.Id}\r\n                customer={customer} />\r\n        )\r\n        return (\r\n\r\n            <div>\r\n                <Modal\r\n                    isOpen={this.props.isOpen}\r\n                    onRequestClose={() => this.props.showModal}\r\n                    shouldCLooseOnOverlayClick={() => this.props.hideModal}>\r\n                    <h1>New Booking</h1>\r\n                    <h4>Date: {(this.props.modalStartDate).substring(0, 10)}</h4>\r\n                    <h4>Start time: {(this.props.modalStartDate).substring(11, 16)} - {(this.props.modalEndDate).substring(11, 16)}</h4>\r\n                    <h2>Select a customer to book below</h2>\r\n                    <div>\r\n                        {torender}\r\n                    </div>\r\n                    <br></br>\r\n                    <div>\r\n                        <table>\r\n                            <tr>\r\n\r\n                                <select\r\n                                    value={this.state.selectedCustomer}\r\n                                    onChange={this.updateSelectedCustomer}\r\n                                >\r\n                                    {selectionToRender}\r\n                                </select>\r\n\r\n                            </tr>\r\n                            <td>\r\n                                <button onClick={this.postBooking}>Confirm</button>\r\n\r\n                            </td><td>\r\n\r\n                                <button onClick={() => this.props.onClickFunction()}>Close</button>\r\n                            </td>\r\n\r\n                        </table>\r\n\r\n                    </div>\r\n\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default AddBookingModal\r\n\r\n\r\n","C:\\Users\\User\\Documents\\Git\\physio-app\\src\\AddCustomerModal.js",["53"],"import './Modal.css';\r\nimport React, { Component } from 'react';\r\nimport Modal from 'react-modal'\r\nimport axios from 'axios'\r\n\r\nlet EMslot = [\"SUN-EM\", \"MON-EM\", \"TUE-EM\", \"WED-EM\", \"THU-EM\", \"FRI-EM\", \"SAT-EM\"];\r\nlet LMslot = [\"SUN-LM\", \"MON-LM\", \"TUE-LM\", \"WED-LM\", \"THU-LM\", \"FRI-LM\", \"SAT-LM\"];\r\nlet EAslot = [\"SUN-EA\", \"MON-EA\", \"TUE-EA\", \"WED-EA\", \"THU-EA\", \"FRI-EA\", \"SAT-EA\"];\r\nlet LAslot = [\"SUN-LA\", \"MON-LA\", \"TUE-LA\", \"WED-LA\", \"THU-LA\", \"FRI-LA\", \"SAT-LA\"];\r\nlet Eslot = [\"SUN-E\", \"MON-E\", \"TUE-E\", \"WED-E\", \"THU-E\", \"FRI-E\", \"SAT-E\"];\r\nlet Nslot = [\"SUN-N\", \"MON-N\", \"TUE-N\", \"WED-N\", \"THU-N\", \"FRI-N\", \"SAT-N\"];\r\nlet defaultCustomer = {\r\n    \"FRI-E\": false,\r\n    \"FRI-EA\": false,\r\n    \"FRI-EM\": false,\r\n    \"FRI-LA\": false,\r\n    \"FRI-LM\": false,\r\n    \"FRI-N\": false,\r\n    \"MON-E\": false,\r\n    \"MON-EA\": false,\r\n    \"MON-EM\": false,\r\n    \"MON-LA\": false,\r\n    \"MON-LM\": false,\r\n    \"MON-N\": false,\r\n    \"SAT-E\": false,\r\n    \"SAT-EA\": false,\r\n    \"SAT-EM\": false,\r\n    \"SAT-LA\": false,\r\n    \"SAT-LM\": false,\r\n    \"SAT-N\": false,\r\n    \"SUN-E\": false,\r\n    \"SUN-EA\": false,\r\n    \"SUN-EM\": false,\r\n    \"SUN-LA\": false,\r\n    \"SUN-LM\": false,\r\n    \"SUN-N\": false,\r\n    \"THU-E\": false,\r\n    \"THU-EA\": false,\r\n    \"THU-EM\": false,\r\n    \"THU-LA\": false,\r\n    \"THU-LM\": false,\r\n    \"THU-N\": false,\r\n    \"TUE-E\": false,\r\n    \"TUE-EA\": false,\r\n    \"TUE-EM\": false,\r\n    \"TUE-LA\": false,\r\n    \"TUE-LM\": false,\r\n    \"TUE-N\": false,\r\n    \"WED-E\": false,\r\n    \"WED-EA\": false,\r\n    \"WED-EM\": false,\r\n    \"WED-LA\": false,\r\n    \"WED-LM\": false,\r\n    \"WED-N\": false,\r\n    Name: \"\"\r\n}\r\nclass AddCustomerModal extends Component {\r\n    constructor(props) {\r\n        super()\r\n\r\n        this.state = {\r\n            customer: defaultCustomer\r\n        }\r\n\r\n        this.slotChanged = this.slotChanged.bind(this);\r\n        this.postCustomer = this.postCustomer.bind(this);\r\n        this.nameChanged = this.nameChanged.bind(this);\r\n    }\r\n\r\n    slotChanged(slot) {\r\n        console.log(\"slot changed\", this.state.customer[slot])\r\n        // this.setState(prevState=>{\r\n        //     console.log(prevState[slot],slot)\r\n        //     console.log(prevState[slot]!=this.state[slot])\r\n        //     if(prevState[slot]!=this.state[slot]){\r\n        //      return   this.state[slot] = !prevState[slot]\r\n        //     }\r\n        // })   \r\n        // this.setState({[slot]:!this.state[slot]})\r\n        const newCustomer = {\r\n            ...this.state.customer,\r\n            [slot]: !this.state.customer[slot]\r\n        }\r\n        this.setState({ customer: newCustomer })\r\n    }\r\n    nameChanged(event){\r\n        console.log(\"name changed\",this.state.customer['Name'])\r\n        const newCustomer = {\r\n            ...this.state.customer,\r\n            Name: event.target.value\r\n        }\r\n        this.setState({ customer: newCustomer })\r\n    }\r\n\r\n    postCustomer() {\r\n        console.log(this.state.customer)\r\n        this.props.onClickFunction()\r\n        this.setState({\r\n            customer: defaultCustomer\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    render() {\r\n        let EMrenders = EMslot.map(slot =>\r\n            <td>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={this.state.customer[slot]}\r\n                    onChange={() => this.slotChanged(slot)} />\r\n            </td>\r\n        )\r\n        let LMrenders = LMslot.map(slot =>\r\n            <td>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={this.state.customer[slot]}\r\n                    onChange={() => this.slotChanged(slot)} />\r\n            </td>\r\n        )\r\n        let EArenders = EAslot.map(slot =>\r\n            <td>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={this.state.customer[slot]}\r\n                    onChange={() => this.slotChanged(slot)} />\r\n            </td>\r\n        )\r\n        let LArenders = LAslot.map(slot =>\r\n            <td>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={this.state.customer[slot]}\r\n                    onChange={() => this.slotChanged(slot)} />\r\n            </td>\r\n        )\r\n        let Erenders = Eslot.map(slot =>\r\n            <td>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={this.state.customer[slot]}\r\n                    onChange={() => this.slotChanged(slot)} />\r\n            </td>\r\n        )\r\n        let Nrenders = Nslot.map(slot =>\r\n            <td>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={this.state.customer[slot]}\r\n                    onChange={() => this.slotChanged(slot)} />\r\n            </td>\r\n        )\r\n\r\n\r\n        return (\r\n            <div>\r\n                <Modal\r\n                    isOpen={this.props.isOpen}\r\n                    onRequestClose={() => this.props.showModal}\r\n                    shouldCloseOnOverlayClick={() => this.props.hideModal}>\r\n                    <h1>New Customer</h1>\r\n                    <h4>Name: </h4> <input type=\"text\" onChange={this.nameChanged}/>\r\n                    <h4>Time Pref: </h4>\r\n                    <table border=\"1px\">\r\n                        <thead>\r\n                            <tr>\r\n                                <td>Hour Preference \\ Day</td><td>Sunday</td><td>Monday</td><td>Tuesday</td><td>Wednesday</td><td>Thursday</td><td>Friday</td><td>Saturday</td>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n\r\n                            <tr>\r\n                                <td>Early Morning</td>{EMrenders}\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Late Morning</td>{LMrenders}\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Early Afternoon</td>{EArenders}\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Late Afternoon</td>{LArenders}\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Evening</td>{Erenders}\r\n                            </tr>\r\n                            <tr>\r\n                                <td>Night</td>{Nrenders}\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n\r\n                    <button onClick={this.postCustomer}>Confirm</button>\r\n                    <button onClick={() => this.props.onClickFunction()}>Close</button>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default AddCustomerModal\r\n\r\n\r\n","C:\\Users\\User\\Documents\\Git\\physio-app\\src\\EditBookingModal.js",[],{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":2,"column":10,"nodeType":"60","messageId":"61","endLine":2,"endColumn":18},{"ruleId":"62","severity":1,"message":"63","line":142,"column":43,"nodeType":"64","messageId":"65","endLine":142,"endColumn":45},{"ruleId":"66","severity":1,"message":"67","line":143,"column":7,"nodeType":"68","messageId":"69","endLine":143,"endColumn":39},{"ruleId":"62","severity":1,"message":"70","line":175,"column":26,"nodeType":"64","messageId":"65","endLine":175,"endColumn":28},{"ruleId":"71","severity":1,"message":"72","line":4,"column":5,"nodeType":"73","messageId":"74","endLine":6,"endColumn":6},{"ruleId":"71","severity":1,"message":"72","line":4,"column":5,"nodeType":"73","messageId":"74","endLine":7,"endColumn":6},{"ruleId":"62","severity":1,"message":"70","line":27,"column":38,"nodeType":"64","messageId":"65","endLine":27,"endColumn":40},{"ruleId":"58","severity":1,"message":"75","line":4,"column":8,"nodeType":"60","messageId":"61","endLine":4,"endColumn":13},"no-native-reassign",["76"],"no-negated-in-lhs",["77"],"no-unused-vars","'DayPilot' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","Expected '!==' and instead saw '!='.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'axios' is defined but never used.","no-global-assign","no-unsafe-negation"]